
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;

using BazaarDemo.BackEnd.Domain.Entities;
using BazaarDemo.BackEnd.Domain.Contracts.Specifications;
using System.Diagnostics.CodeAnalysis;
using System.CodeDom.Compiler;
using System.Runtime.Serialization;
using EverNext.Domain.Model;
using System.Collections.Generic;


namespace BazaarDemo.BackEnd.Domain.Contracts.Specifications
{

[Serializable]
[DataContract(Name = "ProductSpecification", Namespace = "http://schemas.datacontract.org/2004/07/EverNext.Domain.Model.Specifications")]
[ExcludeFromCodeCoverage]
[GeneratedCode("SpecificationImplementationCodeGen","1.0")]
public partial class ProductSpecification : Specification<BazaarDemo.BackEnd.Domain.Entities.Product>
{
		[DataMember]
		public bool? Negate
		{
			get;
			set;
		}

		[DataMember]
		public ProductSpecification And
		{
			get;
			set;
		}

		[DataMember]
		public ProductSpecification Or
		{
			get;
			set;
		}

	[DataMember]
	public Nullable<int> ProductId
	{
		get; 
		set;
	}

	[DataMember]
	public ICollection<Nullable<int>> ProductIdList
	{
		get;
		set;
	}

	[DataMember]
	public string ProductName
	{
		get; 
		set;
	}

	[DataMember]
	public ICollection<string> ProductNameList
	{
		get;
		set;
	}


	[DataMember]
	public string ProductNameContains
	{
		get;
		set;
	}
	
	[DataMember]
	public string ProductNameStartsWith
	{
		get;
		set;
	}
	
	[DataMember]
	public string ProductNameEndsWith
	{
		get;
		set;
	}

	[DataMember]
	public string ProductDescription
	{
		get; 
		set;
	}

	[DataMember]
	public ICollection<string> ProductDescriptionList
	{
		get;
		set;
	}


	[DataMember]
	public string ProductDescriptionContains
	{
		get;
		set;
	}
	
	[DataMember]
	public string ProductDescriptionStartsWith
	{
		get;
		set;
	}
	
	[DataMember]
	public string ProductDescriptionEndsWith
	{
		get;
		set;
	}

	[DataMember]
	public Nullable<decimal> ProductCost
	{
		get; 
		set;
	}

	[DataMember]
	public ICollection<Nullable<decimal>> ProductCostList
	{
		get;
		set;
	}


	[DataMember]
	public Nullable<decimal> ProductCostFrom
	{
		get;
		set;
	}
	
	[DataMember]
	public Nullable<decimal> ProductCostTo
	{
		get;
		set;
	}


	[DataMember]
	public Nullable<int> ProductFamilyId
	{
		get; 
		set;
	}

	[DataMember]
	public ICollection<Nullable<int>> ProductFamilyIdList
	{
		get;
		set;
	}


    #region Navigation Properties
    

	[DataMember]
	public OrderSpecification Orders
	{
		get;
		set;
	}


	[DataMember]
	public ProductFamilySpecification ProductFamily
	{
		get;
		set;
	}

        #endregion

    

	/// <summary>
	/// Default constructor (needed for serialization)
	/// Initializes a new instance of the <see cref="ProductSpecification"/> class.
	/// </summary>
	public ProductSpecification()
	{

	}

	

	/// <summary>
	/// Initializes a new instance of the <see cref="ProductSpecification"/> class.
	/// </summary>
	/// <param name="initializeNavigationProperties">if set to <c>true</c> initialize navigation properties.</param>
	public ProductSpecification(bool initializeNavigationProperties)
	{
		if(!initializeNavigationProperties)
			return;


		this.Orders = new OrderSpecification();

		this.ProductFamily = new ProductFamilySpecification();

	}


    #region ISpecification Members
    

	public override Expression<Func<BazaarDemo.BackEnd.Domain.Entities.Product, bool>> GetExpression()
	{
		Expression<Func<BazaarDemo.BackEnd.Domain.Entities.Product, bool>> expression = x => true;


		if(ProductIdList!=null&&ProductIdList.Count > 0)
			expression = expression.And(x => ProductIdList.Contains(x.ProductId));



		if(ProductId.HasValue)
			expression = expression.And(x => x.ProductId == ProductId.Value);


		if(ProductNameList!=null&&ProductNameList.Count > 0)
			expression = expression.And(x => ProductNameList.Contains(x.ProductName));

	
		if(!string.IsNullOrWhiteSpace(ProductName))  
			expression = expression.And(x => x.ProductName.Equals(ProductName));
			
		if(!string.IsNullOrWhiteSpace(ProductNameContains))  
			expression = expression.And(x => x.ProductName.Contains(ProductNameContains));
			
		if(!string.IsNullOrWhiteSpace(ProductNameStartsWith))
			expression = expression.And(x => x.ProductName.StartsWith(ProductNameStartsWith));

		if(!string.IsNullOrWhiteSpace(ProductNameEndsWith))
			expression = expression.And(x => x.ProductName.EndsWith(ProductNameEndsWith));


		if(ProductDescriptionList!=null&&ProductDescriptionList.Count > 0)
			expression = expression.And(x => ProductDescriptionList.Contains(x.ProductDescription));

	
		if(!string.IsNullOrWhiteSpace(ProductDescription))  
			expression = expression.And(x => x.ProductDescription.Equals(ProductDescription));
			
		if(!string.IsNullOrWhiteSpace(ProductDescriptionContains))  
			expression = expression.And(x => x.ProductDescription.Contains(ProductDescriptionContains));
			
		if(!string.IsNullOrWhiteSpace(ProductDescriptionStartsWith))
			expression = expression.And(x => x.ProductDescription.StartsWith(ProductDescriptionStartsWith));

		if(!string.IsNullOrWhiteSpace(ProductDescriptionEndsWith))
			expression = expression.And(x => x.ProductDescription.EndsWith(ProductDescriptionEndsWith));


		if(ProductCostList!=null&&ProductCostList.Count > 0)
			expression = expression.And(x => ProductCostList.Contains(x.ProductCost));



		if(ProductCost.HasValue)
			expression = expression.And(x => x.ProductCost == ProductCost.Value);
	
		if(ProductCostFrom.HasValue)
			expression = expression.And(x => x.ProductCost >= ProductCostFrom.Value);
			
		if(ProductCostTo.HasValue)
			expression = expression.And(x => x.ProductCost <= ProductCostTo.Value);


		if(ProductFamilyIdList!=null&&ProductFamilyIdList.Count > 0)
			expression = expression.And(x => ProductFamilyIdList.Contains(x.ProductFamilyId));



		if(ProductFamilyId.HasValue)
			expression = expression.And(x => x.ProductFamilyId == ProductFamilyId.Value);
		
		//
		// Navigation properties
		//


		if(this.Orders != null)
		{

			var subExpression = Orders.GetExpression();
			expression = expression.And(x => x.Orders.AsQueryable().Any(subExpression));

		}


		if(this.ProductFamily != null)
		{

			var subExpression = ProductFamily.GetExpression();
			expression = expression.And(x => (new[] { x.ProductFamily }).AsQueryable().Any(subExpression));

		}
	
		if (Negate != null && Negate.Value)
		{
			expression = Expression.Lambda<Func<BazaarDemo.BackEnd.Domain.Entities.Product,bool>>(Expression.Not(expression.Body), expression.Parameters);
		}
			
		if(And != null)
		{
			expression = expression.And(And.GetExpression());
		}

		if (Or != null)
		{
			expression = expression.Or(Or.GetExpression());
		}

		return expression;
	}


	public override bool IsSatisfiedBy(BazaarDemo.BackEnd.Domain.Entities.Product entity)
	{
		// convert single entity to a IQueryable object, 
		// in order to be able to use lambda expressions
		IQueryable<BazaarDemo.BackEnd.Domain.Entities.Product> entities = (new[] { entity }).AsQueryable();
		
		return entities.Any(this.GetExpression());
	}
	
        #endregion

    
}

}
