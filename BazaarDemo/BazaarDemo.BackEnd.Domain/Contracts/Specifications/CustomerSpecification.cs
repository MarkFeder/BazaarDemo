
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;

using BazaarDemo.BackEnd.Domain.Entities;
using BazaarDemo.BackEnd.Domain.Contracts.Specifications;
using System.Diagnostics.CodeAnalysis;
using System.CodeDom.Compiler;
using System.Runtime.Serialization;
using EverNext.Domain.Model;
using System.Collections.Generic;


namespace BazaarDemo.BackEnd.Domain.Contracts.Specifications
{

[Serializable]
[DataContract(Name = "CustomerSpecification", Namespace = "http://schemas.datacontract.org/2004/07/EverNext.Domain.Model.Specifications")]
[ExcludeFromCodeCoverage]
[GeneratedCode("SpecificationImplementationCodeGen","1.0")]
public partial class CustomerSpecification : Specification<BazaarDemo.BackEnd.Domain.Entities.Customer>
{
		[DataMember]
		public bool? Negate
		{
			get;
			set;
		}

		[DataMember]
		public CustomerSpecification And
		{
			get;
			set;
		}

		[DataMember]
		public CustomerSpecification Or
		{
			get;
			set;
		}

	[DataMember]
	public Nullable<int> CustomerId
	{
		get; 
		set;
	}

	[DataMember]
	public ICollection<Nullable<int>> CustomerIdList
	{
		get;
		set;
	}

	[DataMember]
	public string CustomerName
	{
		get; 
		set;
	}

	[DataMember]
	public ICollection<string> CustomerNameList
	{
		get;
		set;
	}


	[DataMember]
	public string CustomerNameContains
	{
		get;
		set;
	}
	
	[DataMember]
	public string CustomerNameStartsWith
	{
		get;
		set;
	}
	
	[DataMember]
	public string CustomerNameEndsWith
	{
		get;
		set;
	}

	[DataMember]
	public string CustomerAddress
	{
		get; 
		set;
	}

	[DataMember]
	public ICollection<string> CustomerAddressList
	{
		get;
		set;
	}


	[DataMember]
	public string CustomerAddressContains
	{
		get;
		set;
	}
	
	[DataMember]
	public string CustomerAddressStartsWith
	{
		get;
		set;
	}
	
	[DataMember]
	public string CustomerAddressEndsWith
	{
		get;
		set;
	}

	[DataMember]
	public string CustomerPostCode
	{
		get; 
		set;
	}

	[DataMember]
	public ICollection<string> CustomerPostCodeList
	{
		get;
		set;
	}


	[DataMember]
	public string CustomerPostCodeContains
	{
		get;
		set;
	}
	
	[DataMember]
	public string CustomerPostCodeStartsWith
	{
		get;
		set;
	}
	
	[DataMember]
	public string CustomerPostCodeEndsWith
	{
		get;
		set;
	}


    #region Navigation Properties
    

	[DataMember]
	public OrderSpecification Orders
	{
		get;
		set;
	}

        #endregion

    

	/// <summary>
	/// Default constructor (needed for serialization)
	/// Initializes a new instance of the <see cref="CustomerSpecification"/> class.
	/// </summary>
	public CustomerSpecification()
	{

	}

	

	/// <summary>
	/// Initializes a new instance of the <see cref="CustomerSpecification"/> class.
	/// </summary>
	/// <param name="initializeNavigationProperties">if set to <c>true</c> initialize navigation properties.</param>
	public CustomerSpecification(bool initializeNavigationProperties)
	{
		if(!initializeNavigationProperties)
			return;


		this.Orders = new OrderSpecification();

	}


    #region ISpecification Members
    

	public override Expression<Func<BazaarDemo.BackEnd.Domain.Entities.Customer, bool>> GetExpression()
	{
		Expression<Func<BazaarDemo.BackEnd.Domain.Entities.Customer, bool>> expression = x => true;


		if(CustomerIdList!=null&&CustomerIdList.Count > 0)
			expression = expression.And(x => CustomerIdList.Contains(x.CustomerId));



		if(CustomerId.HasValue)
			expression = expression.And(x => x.CustomerId == CustomerId.Value);


		if(CustomerNameList!=null&&CustomerNameList.Count > 0)
			expression = expression.And(x => CustomerNameList.Contains(x.CustomerName));

	
		if(!string.IsNullOrWhiteSpace(CustomerName))  
			expression = expression.And(x => x.CustomerName.Equals(CustomerName));
			
		if(!string.IsNullOrWhiteSpace(CustomerNameContains))  
			expression = expression.And(x => x.CustomerName.Contains(CustomerNameContains));
			
		if(!string.IsNullOrWhiteSpace(CustomerNameStartsWith))
			expression = expression.And(x => x.CustomerName.StartsWith(CustomerNameStartsWith));

		if(!string.IsNullOrWhiteSpace(CustomerNameEndsWith))
			expression = expression.And(x => x.CustomerName.EndsWith(CustomerNameEndsWith));


		if(CustomerAddressList!=null&&CustomerAddressList.Count > 0)
			expression = expression.And(x => CustomerAddressList.Contains(x.CustomerAddress));

	
		if(!string.IsNullOrWhiteSpace(CustomerAddress))  
			expression = expression.And(x => x.CustomerAddress.Equals(CustomerAddress));
			
		if(!string.IsNullOrWhiteSpace(CustomerAddressContains))  
			expression = expression.And(x => x.CustomerAddress.Contains(CustomerAddressContains));
			
		if(!string.IsNullOrWhiteSpace(CustomerAddressStartsWith))
			expression = expression.And(x => x.CustomerAddress.StartsWith(CustomerAddressStartsWith));

		if(!string.IsNullOrWhiteSpace(CustomerAddressEndsWith))
			expression = expression.And(x => x.CustomerAddress.EndsWith(CustomerAddressEndsWith));


		if(CustomerPostCodeList!=null&&CustomerPostCodeList.Count > 0)
			expression = expression.And(x => CustomerPostCodeList.Contains(x.CustomerPostCode));

	
		if(!string.IsNullOrWhiteSpace(CustomerPostCode))  
			expression = expression.And(x => x.CustomerPostCode.Equals(CustomerPostCode));
			
		if(!string.IsNullOrWhiteSpace(CustomerPostCodeContains))  
			expression = expression.And(x => x.CustomerPostCode.Contains(CustomerPostCodeContains));
			
		if(!string.IsNullOrWhiteSpace(CustomerPostCodeStartsWith))
			expression = expression.And(x => x.CustomerPostCode.StartsWith(CustomerPostCodeStartsWith));

		if(!string.IsNullOrWhiteSpace(CustomerPostCodeEndsWith))
			expression = expression.And(x => x.CustomerPostCode.EndsWith(CustomerPostCodeEndsWith));
		
		//
		// Navigation properties
		//


		if(this.Orders != null)
		{

			var subExpression = Orders.GetExpression();
			expression = expression.And(x => x.Orders.AsQueryable().Any(subExpression));

		}
	
		if (Negate != null && Negate.Value)
		{
			expression = Expression.Lambda<Func<BazaarDemo.BackEnd.Domain.Entities.Customer,bool>>(Expression.Not(expression.Body), expression.Parameters);
		}
			
		if(And != null)
		{
			expression = expression.And(And.GetExpression());
		}

		if (Or != null)
		{
			expression = expression.Or(Or.GetExpression());
		}

		return expression;
	}


	public override bool IsSatisfiedBy(BazaarDemo.BackEnd.Domain.Entities.Customer entity)
	{
		// convert single entity to a IQueryable object, 
		// in order to be able to use lambda expressions
		IQueryable<BazaarDemo.BackEnd.Domain.Entities.Customer> entities = (new[] { entity }).AsQueryable();
		
		return entities.Any(this.GetExpression());
	}
	
        #endregion

    
}

}
