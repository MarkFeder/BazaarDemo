<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="EnvDTE80" #>
<#@ assembly name="Microsoft.VisualStudio.Shell.11.0" #>
<#@ assembly name="Microsoft.VisualStudio.Shell.Interop" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<#@ import namespace="Microsoft.VisualStudio.Shell" #>
<#@ import namespace="Microsoft.VisualStudio.Shell.Interop" #>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ output extension="/"#>
<#
//===================================================================================================
// BEGIN OF EDITABLE AREA. CHANGES OUTSIDE HERE ARE WITHOUT SUPPORT FROM EVERIS ↑↑
//===================================================================================================
// Uncoment the following line and change the debug attribute in the template tag to allow debugging
//System.Diagnostics.Debugger.Launch();

// Suffix used to identify the classes being searched for
string serviceSuffix= "Service";
// Root namespace of the project holding the classes to look for
string rootNameSpace = "BazaarDemo.BackEnd.Domain.Contracts.DomainServices";
// Suffix to append to all the service files created
string filenameSuffix = ".svc";
// Root namespace where the repository Interfaces are located
string rootRepositoryInterfaceNameSpace = "BazaarDemo.BackEnd.Domain.Contracts.DomainServices";
//===================================================================================================
// END OF EDITABLE AREA. CHANGES OUTSIDE HERE ARE WITHOUT SUPPORT FROM EVERIS ↓↓
//===================================================================================================

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

foreach (var classes in FindClasses(rootNameSpace, "", "").Where(c=>c.ImplementedInterfaces.OfType<CodeInterface>()
                                                                                      .Any(d=>d.Name.Equals("IDeserveAService"))))
{
    string modelName = CapitalizeFirstLetter(classes.Name);

    string modelFullName= classes.FullName;
    string FolderPath = modelFullName.Replace(rootNameSpace, "").Replace('.','\\');

    FolderPath = FolderPath.Substring(0, FolderPath.LastIndexOf(modelName));
    if(FolderPath.EndsWith("\\"))
    {
        FolderPath = FolderPath.Remove(FolderPath.LastIndexOf("\\"));
    }
    if(FolderPath.StartsWith("\\"))
    {
        FolderPath = FolderPath.Remove(FolderPath.IndexOf("\\"),1);
    }
    string FileName = modelName + filenameSuffix;

    using(System.IO.FileStream file = BeginFile(FolderPath, FileName))
    {

#><%@ ServiceHost Language="C#" Debug="true" Service="<#=rootRepositoryInterfaceNameSpace+classes.Namespace.FullName.Replace(rootNameSpace, "")+".I"+modelName#>"
Factory="Castle.Facilities.WcfIntegration.DefaultServiceHostFactory, Castle.Facilities.WcfIntegration" %>
<#
        WriteAndFlush(file);
    }
}
#>

<#+
void DeleteOldOutputs(List<string> savedOutputs,ProjectItem projItem)
{
    foreach (ProjectItem childProjectItem in projItem.ProjectItems)
    {
        if (!savedOutputs.Contains(childProjectItem.Name))
        {
            childProjectItem.Delete();
        }
        DeleteOldOutputs(savedOutputs,childProjectItem);
    }
}  

private ProjectItems CreateFolder(string folderPath,ProjectItems folderItems,string fileName)
{
    ProjectItems existingFolder= null;

    if(folderPath.LastIndexOf("\\") > 0)
    {
        string parentPath = folderPath.Remove(folderPath.LastIndexOf("\\"));
        if(parentPath != string.Empty)
        {
            folderItems = CreateFolder(parentPath,folderItems,fileName);

            folderPath = folderPath.Substring(folderPath.LastIndexOf("\\"));
            folderPath = folderPath.Replace("\\","");
        }
    }

    foreach(ProjectItem projItem in folderItems)
    {
        if(projItem.Name == folderPath)
        {
            existingFolder = projItem.ProjectItems;
            break;
        }
    }

    if(existingFolder == null)
    {
        existingFolder = folderItems.AddFolder(folderPath).ProjectItems;
    }
    //else
    //{
        //if(!string.IsNullOrEmpty(fileName))
        //{
            //foreach(ProjectItem projItem in existingFolder)
            //{
                //if(projItem.Name == fileName)
                //{
                    //projItem.Delete();
                        //
                    //break;
                //}
            //}
        //}
    //}

    return existingFolder;
}

private void WriteAndFlush(System.IO.FileStream file)
{
    System.IO.StreamWriter s = new System.IO.StreamWriter(file);

    s.Write(this.GenerationEnvironment.ToString());
    this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);

    s.Flush();
}

private System.IO.FileStream BeginFile(string folderPath, string fileName)
{
    ProjectItems folderItem = null;
    if(!string.IsNullOrEmpty(folderPath))
    {
        folderItem = CreateFolder(folderPath,GetProjectItemFromTemplate().Collection,fileName);
    }
    else
    {
        folderItem = GetProjectItemFromTemplate().Collection;
    }

    string FilePath= System.IO.Path.GetDirectoryName(GetProjectItemFromTemplate().Properties.Item("FullPath").Value.ToString())+((string.IsNullOrEmpty(folderPath))?"":"\\"+folderPath)+"\\" + fileName;

    if(System.IO.File.Exists(FilePath))
    {
        System.IO.File.Delete(FilePath);
    }

    System.IO.FileStream file = System.IO.File.Create(FilePath);
    folderItem.AddFromFile(FilePath);
    return file;
}

void WriteHeader(params string[] extraUsings)
{
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template (DomainServices.tt).
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
<#=String.Join(String.Empty, extraUsings.Select(u => "using " + u + ";" + Environment.NewLine).ToArray())#>
<#+
}

void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}

void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}

    private System.Collections.Generic.List<CodeClass> FindClasses(string nameSpace, string className, string baseClassName)
    {
        System.Collections.Generic.List<CodeClass> result = new System.Collections.Generic.List<CodeClass>();
        FindClasses(GetProject().CodeModel.CodeElements, className, baseClassName, nameSpace, result, false);
        return result;

    }

    private void FindClasses(CodeElements elements, string className, string baseClassName, string searchNamespace, List<CodeClass> result, bool isNamespaceOk)
    {
        if (elements == null) return;
        foreach (CodeElement element in elements)
        {
            if (element is EnvDTE.CodeNamespace)
            {
                EnvDTE.CodeNamespace ns = element as EnvDTE.CodeNamespace;
                if (ns != null)
                {
                    if (ns.FullName.StartsWith(searchNamespace))
                        FindClasses(ns.Members, className, baseClassName, searchNamespace, result, true);
                    else
                        FindClasses(ns.Members, className, baseClassName, searchNamespace, result, false);
                }
            }
            else if (element is CodeClass && isNamespaceOk)
            {
                CodeClass c = element as CodeClass;
                if (c != null)
                {
                    if (c.FullName.Contains(className) && (baseClassName == null || (HasIt(c.Bases, baseClassName) && c.Name != baseClassName)))
                        result.Add(c);

                    FindClasses(c.Members, className, baseClassName, searchNamespace, result, true);
                }

            }
        }
    }

    private bool HasIt(CodeElements elements, string name)
    {
		if(name == string.Empty)
			return true;
        foreach (CodeElement element in elements)
        {

            CodeClass c = element as CodeClass;
            if (c != null && c.Bases != null)
            {
                if (HasIt(c.Bases, name))
                {
                    return true;
                }
            }

            if (element.Name == name)
                return true;
        }
        return false;
    }

	private List<CodeClass> GetPartialClasses(CodeClass2 c)
    {
        System.Collections.Generic.List<CodeClass> result = new System.Collections.Generic.List<CodeClass>();
        foreach (CodeClass2 p in c.PartialClasses)
        {
            result.Add(p);
        }

        return result;
    }

    private Project GetProject()
    {
        IServiceProvider serviceProvider = (IServiceProvider)this.Host;
        DTE dte = serviceProvider.GetService(typeof(DTE)) as DTE; 
        // Get DTE
        //var dte = (DTE)TransformationContext.Current.GetService(typeof(DTE));

        // Get ProjectItem representing the template file
        ProjectItem projectItem = dte.Solution.FindProjectItem(this.Host.TemplateFile);

        // Get the Project of the template file
        Project project = projectItem.ContainingProject;

        return project;
    }

    private string GetDefaultNamespace()
    {
        IServiceProvider serviceProvider = (IServiceProvider)this.Host;
        DTE dte = serviceProvider.GetService(typeof(DTE)) as DTE; 
        // Get DTE
        //var dte = (DTE)TransformationContext.Current.GetService(typeof(DTE));

        // Get ProjectItem representing the template file
        ProjectItem projectItem = dte.Solution.FindProjectItem(this.Host.TemplateFile);

        // Get the Project of the template file
        Project project = projectItem.ContainingProject;

        var vsSolution = (IVsSolution)serviceProvider.GetService(typeof(SVsSolution));
        IVsHierarchy vsHierarchy;
        ErrorHandler.ThrowOnFailure(vsSolution.GetProjectOfUniqueName(project.FullName, out vsHierarchy));
        uint projectItemId;
        ErrorHandler.ThrowOnFailure(vsHierarchy.ParseCanonicalName(projectItem.FileNames[1], out projectItemId));
        object defaultNamespace;
        ErrorHandler.ThrowOnFailure(vsHierarchy.GetProperty(projectItemId, (int)VsHierarchyPropID.DefaultNamespace, out defaultNamespace));
        return ((string)defaultNamespace);
    }

	private ProjectItem GetProjectItemFromTemplate()
{
    IServiceProvider serviceProvider = (IServiceProvider)this.Host;
    DTE dte = serviceProvider.GetService(typeof(DTE)) as DTE; 

    // Get ProjectItem representing the template file
    ProjectItem projectItem = dte.Solution.FindProjectItem(this.Host.TemplateFile);
        
    return projectItem;
}

    
private string CommonPrefix(List<string> stringList)
{
    if (stringList.Count == 0)
    {
        return "";
    }

    if (stringList.Count == 1)
    {
        return stringList[0];
    }

    int prefixLength = 0;

    foreach (char c in stringList[0])
    {
        foreach (string s in stringList)
        {
            if (s.Length <= prefixLength || s[prefixLength] != c)
            {
                return stringList[0].Substring(0, prefixLength);
            }
        }
        prefixLength++;
    }

    return stringList[0]; // all strings identical
}

private string CapitalizeFirstLetter(string s)
{
    if (String.IsNullOrEmpty(s))
        return s;
    if (s.Length == 1)
        return s.ToUpper();
    return s.Remove(1).ToUpper() + s.Substring(1);
}
#>